def brazo_final():
  global _hidden_verificationVariable=0
  set_safety_mode_transition_hardness(1)
  set_gravity([0.0, 0.0, 9.82])
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_tcp(p[0.0,4.0E-4,0.26,0.0,0.0,0.0])
  set_target_payload(1.240000, [-0.053000, 0.000000, 0.034000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  global cal_clavo=-705.5
  # begin: URCap Installation Node
  #   Source: Cognex In-Sight Robot Guidance, 1.3.1, Cognex Corporation
  #   Type: Cognex
  stringRPC = rpc_factory("xmlrpc","http://127.0.0.1:33004")
  socket_open("192.168.0.100", 3105, "CGNX_SOCKET")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.10.1, OnRobot A/S
  #   Type: RG Configuration
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0,1)
  set_tool_digital_output_mode(1,1)
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.10205
  global zsysm=1.085
  global zmasx=0
  global zmasy=0
  global zmasz=0.23434
  global zslax=0
  global zslay=0
  global zslaz=0
  global zmasm=0
  global zslam=0
  global zslatcp=p[0,0,0,0,0,0]
  global zmastcp=p[0,0,0.23435,0,-0,-3.14159]
  thread lost_grip_thread():
  while True:
  set_tool_voltage(24)
  	if True ==get_digital_in(9):
  		sleep(0.024)
  		if True == grip_detected:
  			if False == get_digital_in(8):
  				grip_detected=False
  				lost_grip=True
  			end
  		end
  	set_tool_analog_input_domain(0, 1)
  	set_tool_analog_input_domain(1, 1)
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	end
  	sync()
  end
  end
  lg_thr = run lost_grip_thread()
  def RG6(target_width=160, target_force=120, payload=0.0, set_payload=False, depth_compensation=False, slave=False):
  	set_tcp(p[0,0,0.23435,0,-0,-3.14159])
  	grip_detected=False
  	if slave:
  		slave_grip_detected=False
  	else:
  		master_grip_detected=False
  	end
  	timeout = 0
  	timeout_limit = 5000000
  	while get_digital_in(9) == False:
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout = timeout+1
  	  sync()
  	end
  	def bit(input):
  	  msb=65536
  	  local i=0
  	  local output=0
  	  while i<17:
  	    set_digital_out(8,True)
  	    if input>=msb:
  	      input=input-msb
  	      set_digital_out(9,False)
  	    else:
  	      set_digital_out(9,True)
  	    end
  	    if get_digital_in(8):
  	      out=1
  	    end
  	    sync()
  	    set_digital_out(8,False)
  	    sync()
  	    input=input*2
  	    output=output*2
  	    i=i+1
  	  end
  	  return output
  	end
  	target_width=target_width+9.2
  	if target_force>120:
  	target_force=120
  	end
  	if target_force<25:
  	target_force=25
  	end
  	if target_width>160:
  	target_width=160
  	end
  	if target_width<0:
  	target_width=0
  	end
  	rg_data=floor(target_width)*4
  	rg_data=rg_data+floor(target_force/5)*4*161
  	rg_data=rg_data+32768
  	if slave:
  	rg_data=rg_data+16384
  	end
  	bit(rg_data)
  	if slave==False:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zmastcp)
  	end
  	if slave:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zslatcp)
  	end
  	t_rg_w=pose_inv(t_w_rg)
  	if depth_compensation:
  	finger_length = 80.0/1000
  	finger_heigth_disp = 6.3/1000
  	center_displacement = 10.5/1000
  
  	start_pose = get_forward_kin()
  	set_analog_inputrange(2, 1)
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  
  	start_depth = cos(zangle)*finger_length
  
  	sleep(0.016)
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout=timeout+1
  	  sleep(0.008)
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 1250000
  	compensation_depth = 0
  	while get_digital_in(9) == False:
  	  zscale = (get_analog_in(2)-0.026)/2.5900013
  	  zangle = zscale*1.57079633+-0.09424778
  	  zwidth = 8.4+160*sin(zangle)
  	  measure_depth = cos(zangle)*finger_length
  	  compensation_depth = (measure_depth - start_depth)
  	  target_pose =pose_add(start_pose,pose_trans(pose_trans(t_w_rg, p[0,0,-compensation_depth,0,0,0]),t_rg_w))
  
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout=timeout+1
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	#textmsg("end gripper move!!!!!")
  	#nspeedthr = 0.001
  	#nspeed = norm(get_actual_tcp_speed())
  	#while nspeed > nspeedthr:
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  nspeed = norm(get_actual_tcp_speed())
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	if point_dist(target_pose, get_forward_kin()) > 0.005:
  	popup("Lower grasping force or max width",title="RG-lag threshold exceeded", warning=False, error=False, blocking=False)
  	end
  	end
  	act_comp_pose = p[0,0,0,0,0,0]
  	while norm(act_comp_pose) < norm(compensation_depth)-0.0002:
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	act_comp_pose = pose_trans(pose_inv(start_pose),get_forward_kin())
  	end
  	stopj(2)
  	end
  	if depth_compensation==False:
  	timeout = 0
  	timeout_count=20*0.008/0.002
  	while get_digital_in(9) == True:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_count:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 5000000
  	while get_digital_in(9) == False:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_limit:
  	    break
  	  end
  	end
  	end
  	sleep(0.024)
  	if set_payload:
  	if slave:
  	if get_analog_in(3)/0.5180003 < 1.42:
  	zslam=0
  	else:
  	zslam=payload
  	end
  	else:
  	if get_digital_in(8) == False:
  	zmasm=0
  	else:
  	zmasm=payload
  	end
  	end
  	zload=zmasm+zslam+zsysm
  	set_payload(zload,[(zsysx*zsysm+zmasx*zmasm+zslax*zslam)/zload,(zsysy*zsysm+zmasy*zmasm+zslay*zslam)/zload,(zsysz*zsysm+zmasz*zmasm+zslaz*zslam)/zload])
  	end
  	master_grip_detected=False
  	master_lost_grip=False
  	slave_grip_detected=False
  	slave_lost_grip=False
  	if True == get_digital_in(8):
  		master_grip_detected=True
  	end
  	if get_analog_in(3)/0.5180003>1.97:
  		slave_grip_detected=True
  	end
  	grip_detected=False
  	lost_grip=False
  	if True == get_digital_in(8):
  		grip_detected=True
  	end
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	if slave:
  	slave_measure_width=measure_width
  	else:
  	master_measure_width=measure_width
  	end
  	return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[0,0,0.23435,0,-0,-3.14159])
  # end: URCap Installation Node
  step_count_b3d40dc5_935e_456d_b949_cdcaac815eae = 0.0
  thread Step_Counter_Thread_d3b601cd_7053_4606_a8ea_2a2dd1a44dd5():
    while (True):
      step_count_b3d40dc5_935e_456d_b949_cdcaac815eae = step_count_b3d40dc5_935e_456d_b949_cdcaac815eae + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_d3b601cd_7053_4606_a8ea_2a2dd1a44dd5()
  global Waypoint_1_p=p[-.213711091985, -.570525430280, .222383278745, -3.133454304439, -.000693324411, -.085858433240]
  global Waypoint_1_q=[0.9659379124641418, -1.3049742144397278, 1.3379038015948694, -1.5672400137740006, -1.5230372587787073, -0.601818863545553]
  global Waypoint_2_p=p[-.213712335445, -.570556779437, .104626271811, -3.133619681002, -.000687421919, -.085701566351]
  global Waypoint_2_q=[0.965782642364502, -1.2552009683898468, 1.5784581343280237, -1.85783114055776, -1.5234492460833948, -0.6001718680011194]
  def calculate_point_to_move_towards(feature, direction, position_distance):
    local posDir=[direction[0], direction[1], direction[2]]
    if (norm(posDir) < 1e-6):
      return get_target_waypoint()
    end
    local direction_vector_normalized=normalize(posDir)
    local displacement_pose=p[direction_vector_normalized[0] * position_distance,direction_vector_normalized[1] * position_distance,direction_vector_normalized[2] * position_distance,0,0,0]
    local wanted_displacement_in_base_frame=pose_sub(pose_trans(feature, displacement_pose), feature)
    return pose_add(get_target_waypoint(), wanted_displacement_in_base_frame)
  end
  global Waypoint_3_from_p=p[-.213687411106, -.570631758675, .099426235825, -3.133770982819, -.000893990981, -.085623598423]
  global Waypoint_3_to_p=p[-.213714662675, -.570645291850, .071150573906, -3.133771063647, -.000830910501, -.085591303631]
  global Waypoint_4_p=p[-.213715178009, -.570603182974, .242837615151, -3.133757687699, -.000784195045, -.085515469803]
  global Waypoint_4_q=[0.9660367369651794, -1.3055259448340912, 1.2865760962115687, -1.5157195080867787, -1.5230572859393519, -0.6020663420306605]
  global Waypoint_5_p=p[.243532762136, -.539119969975, .154145619028, -3.133669109288, -.000876978424, -.085507998262]
  global Waypoint_5_q=[1.7331602573394775, -1.3583141428283234, 1.5907824675189417, -1.8059593639769496, -1.509315315877096, 0.16732944548130035]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveJ"
    $ 4 "Waypoint_1" "breakAfter"
    movej(get_inverse_kin(Waypoint_1_p, qnear=Waypoint_1_q), a=1.3962634015954636, v=3.141592653589793)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG6
    $ 5 "RG6(-3)"
    RG6(-3,120,0.0,True,False,False)
    # end: URCap Program Node
    $ 6 "MoveL"
    $ 7 "Waypoint_2" "breakAfter"
    movel(Waypoint_2_p, a=1.2, v=0.25)
    $ 8 "Direction: Base Z-"
    global move_thread_flag_8=0
    thread move_thread_8():
      enter_critical
      move_thread_flag_8 = 1
      local towardsPos=calculate_point_to_move_towards(p[0.0,0.0,0.0,0.0,0.0,0.0], [0.0,0.0,-1.0], 1000.0)
      movel(towardsPos, a=1.2, v=0.05)
      move_thread_flag_8 = 2
      exit_critical
    end
    move_thread_flag_8 = 0
    move_thread_han_8 = run move_thread_8()
    while (True):
      local targetTcpDirection=get_target_tcp_speed()
      local stepsToRetract=tool_contact(direction=targetTcpDirection)
      if (stepsToRetract > 0):
        kill move_thread_han_8
        stopl(3.0)
        local backTrackMovement=get_actual_joint_positions_history(stepsToRetract)
        local contactPose=get_forward_kin(backTrackMovement)
        local posDir=[targetTcpDirection[0],targetTcpDirection[1],targetTcpDirection[2]]
        local retractTo=contactPose
        if (norm(posDir) > 1e-6):
          local normalizedPosDir=normalize(posDir)
          local additionalRetraction=p[normalizedPosDir[0] * 0.0125, normalizedPosDir[1] * 0.0125, normalizedPosDir[2] * 0.0125, 0, 0, 0]
          retractTo = pose_sub(contactPose, additionalRetraction)
        end
        movel(retractTo, a=3.0, v=0.1)
        $ 9 "Until (tool_contact_detection)"
        # begin: URCap Program Node
        #   Source: RG - On Robot, 1.10.1, OnRobot A/S
        #   Type: RG6
        $ 10 "RG6(93)"
        RG6(93,120,0.0,True,False,False)
        # end: URCap Program Node
        break
      end
      sync()
    end
    $ 11 "Waypoint_3" "breakAfter"
    movel(pose_add(get_target_tcp_pose(), pose_sub(Waypoint_3_to_p, Waypoint_3_from_p)), a=1.2, v=0.1)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG6
    $ 12 "RG6(50)"
    RG6(50,120,0.0,True,False,False)
    # end: URCap Program Node
    $ 13 "Waypoint_4" "breakAfter"
    movel(Waypoint_4_p, a=1.2, v=0.35)
    $ 14 "Waypoint_5" "breakAfter"
    movel(Waypoint_5_p, a=1.2, v=0.35)
    # begin: URCap Program Node
    #   Source: RG - On Robot, 1.10.1, OnRobot A/S
    #   Type: RG6
    $ 15 "RG6(95)"
    RG6(95,120,0.0,True,False,False)
    # end: URCap Program Node
  end
end
