def unnamed():
  global _hidden_verificationVariable=0
  step_count_12dcd3d8_64a6_48e6_b29e_6eacdc0b6112 = 0.0
  thread Step_Counter_Thread_0fa37803_9d85_441a_918a_17103fbe1bdb():
    while (True):
      step_count_12dcd3d8_64a6_48e6_b29e_6eacdc0b6112 = step_count_12dcd3d8_64a6_48e6_b29e_6eacdc0b6112 + 1.0
      sync()
    end
  end
  run Step_Counter_Thread_0fa37803_9d85_441a_918a_17103fbe1bdb()
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_input_actions_to_default()
  set_gravity([0.0, 0.0, 9.82])
  set_tcp(p[0.0,4.0E-4,0.26,0.0,0.0,0.0])
  set_safety_mode_transition_hardness(1)
  set_tool_communication(False, 115200, 0, 1, 1.5, 3.5)
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0, 1)
  set_tool_digital_output_mode(1, 1)
  set_tool_voltage(0)
  set_target_payload(1.240000, [-0.053000, 0.000000, 0.034000], [0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000])
  global cal_clavo=-705.5
  rtde_set_watchdog("speed_slider_mask", 10.0, "ignore")
  # begin: URCap Installation Node
  #   Source: Cognex In-Sight Robot Guidance, 1.3.1, Cognex Corporation
  #   Type: Cognex
  stringRPC = rpc_factory("xmlrpc","http://127.0.0.1:33004")
  socket_open("192.168.0.100", 3105, "CGNX_SOCKET")
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: External Control, 1.0.5, FZI Research Center for Information Technology
  #   Type: External Control
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: RG - On Robot, 1.10.1, OnRobot A/S
  #   Type: RG Configuration
  set_tool_output_mode(0)
  set_tool_digital_output_mode(0,1)
  set_tool_digital_output_mode(1,1)
  global measure_width=0
  global grip_detected=False
  global lost_grip=False
  global zsysx=0
  global zsysy=0
  global zsysz=0.10205
  global zsysm=1.085
  global zmasx=0
  global zmasy=0
  global zmasz=0.23434
  global zslax=0
  global zslay=0
  global zslaz=0
  global zmasm=0
  global zslam=0
  global zslatcp=p[0,0,0,0,0,0]
  global zmastcp=p[0,0,0.23435,0,-0,-3.14159]
  thread lost_grip_thread():
  while True:
  set_tool_voltage(24)
  	if True ==get_digital_in(9):
  		sleep(0.024)
  		if True == grip_detected:
  			if False == get_digital_in(8):
  				grip_detected=False
  				lost_grip=True
  			end
  		end
  	set_tool_analog_input_domain(0, 1)
  	set_tool_analog_input_domain(1, 1)
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	end
  	sync()
  end
  end
  lg_thr = run lost_grip_thread()
  def RG6(target_width=160, target_force=120, payload=0.0, set_payload=False, depth_compensation=False, slave=False):
  	set_tcp(p[0,0,0.23435,0,-0,-3.14159])
  	grip_detected=False
  	if slave:
  		slave_grip_detected=False
  	else:
  		master_grip_detected=False
  	end
  	timeout = 0
  	timeout_limit = 5000000
  	while get_digital_in(9) == False:
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout = timeout+1
  	  sync()
  	end
  	def bit(input):
  	  msb=65536
  	  local i=0
  	  local output=0
  	  while i<17:
  	    set_digital_out(8,True)
  	    if input>=msb:
  	      input=input-msb
  	      set_digital_out(9,False)
  	    else:
  	      set_digital_out(9,True)
  	    end
  	    if get_digital_in(8):
  	      out=1
  	    end
  	    sync()
  	    set_digital_out(8,False)
  	    sync()
  	    input=input*2
  	    output=output*2
  	    i=i+1
  	  end
  	  return output
  	end
  	target_width=target_width+9.2
  	if target_force>120:
  	target_force=120
  	end
  	if target_force<25:
  	target_force=25
  	end
  	if target_width>160:
  	target_width=160
  	end
  	if target_width<0:
  	target_width=0
  	end
  	rg_data=floor(target_width)*4
  	rg_data=rg_data+floor(target_force/5)*4*161
  	rg_data=rg_data+32768
  	if slave:
  	rg_data=rg_data+16384
  	end
  	bit(rg_data)
  	if slave==False:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zmastcp)
  	end
  	if slave:
  	t_w_rg=pose_trans(get_actual_tool_flange_pose(), zslatcp)
  	end
  	t_rg_w=pose_inv(t_w_rg)
  	if depth_compensation:
  	finger_length = 80.0/1000
  	finger_heigth_disp = 6.3/1000
  	center_displacement = 10.5/1000
  
  	start_pose = get_forward_kin()
  	set_analog_inputrange(2, 1)
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  
  	start_depth = cos(zangle)*finger_length
  
  	sleep(0.016)
  	timeout = 0
  	while get_digital_in(9) == True:
  	  timeout=timeout+1
  	  sleep(0.008)
  	  if timeout > 20:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 1250000
  	compensation_depth = 0
  	while get_digital_in(9) == False:
  	  zscale = (get_analog_in(2)-0.026)/2.5900013
  	  zangle = zscale*1.57079633+-0.09424778
  	  zwidth = 8.4+160*sin(zangle)
  	  measure_depth = cos(zangle)*finger_length
  	  compensation_depth = (measure_depth - start_depth)
  	  target_pose =pose_add(start_pose,pose_trans(pose_trans(t_w_rg, p[0,0,-compensation_depth,0,0,0]),t_rg_w))
  
  	  if timeout > timeout_limit:
  	    break
  	  end
  	  timeout=timeout+1
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	#textmsg("end gripper move!!!!!")
  	#nspeedthr = 0.001
  	#nspeed = norm(get_actual_tcp_speed())
  	#while nspeed > nspeedthr:
  	#  servoj(get_inverse_kin(target_pose), t=0.008, lookahead_time=0.033, gain=1500)
  	#  nspeed = norm(get_actual_tcp_speed())
  	#  textmsg(point_dist(target_pose, get_forward_kin()))
  	#end
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	if point_dist(target_pose, get_forward_kin()) > 0.005:
  	popup("Lower grasping force or max width",title="RG-lag threshold exceeded", warning=False, error=False, blocking=False)
  	end
  	end
  	act_comp_pose = p[0,0,0,0,0,0]
  	while norm(act_comp_pose) < norm(compensation_depth)-0.0002:
  	servoj(get_inverse_kin(target_pose),0,0,0.008,0.01,2000)
  	act_comp_pose = pose_trans(pose_inv(start_pose),get_forward_kin())
  	end
  	stopj(2)
  	end
  	if depth_compensation==False:
  	timeout = 0
  	timeout_count=20*0.008/0.002
  	while get_digital_in(9) == True:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_count:
  	    break
  	  end
  	end
  	timeout = 0
  	timeout_limit = 5000000
  	while get_digital_in(9) == False:
  	  timeout = timeout+1
  	  sync()
  	  if timeout > timeout_limit:
  	    break
  	  end
  	end
  	end
  	sleep(0.024)
  	if set_payload:
  	if slave:
  	if get_analog_in(3)/0.5180003 < 1.42:
  	zslam=0
  	else:
  	zslam=payload
  	end
  	else:
  	if get_digital_in(8) == False:
  	zmasm=0
  	else:
  	zmasm=payload
  	end
  	end
  	zload=zmasm+zslam+zsysm
  	set_payload(zload,[(zsysx*zsysm+zmasx*zmasm+zslax*zslam)/zload,(zsysy*zsysm+zmasy*zmasm+zslay*zslam)/zload,(zsysz*zsysm+zmasz*zmasm+zslaz*zslam)/zload])
  	end
  	master_grip_detected=False
  	master_lost_grip=False
  	slave_grip_detected=False
  	slave_lost_grip=False
  	if True == get_digital_in(8):
  		master_grip_detected=True
  	end
  	if get_analog_in(3)/0.5180003>1.97:
  		slave_grip_detected=True
  	end
  	grip_detected=False
  	lost_grip=False
  	if True == get_digital_in(8):
  		grip_detected=True
  	end
  	zscale = (get_analog_in(2)-0.026)/2.5900013
  	zangle = zscale*1.57079633+-0.09424778
  	zwidth = 8.4+160*sin(zangle)
  	global measure_width = (floor(zwidth*10))/10-9.2
  	if slave:
  	slave_measure_width=measure_width
  	else:
  	master_measure_width=measure_width
  	end
  	return grip_detected
  end
  set_tool_voltage(24)
  set_tcp(p[0,0,0.23435,0,-0,-3.14159])
  # end: URCap Installation Node
  # begin: URCap Installation Node
  #   Source: ros_as_a_service, 0.2.0, FZI Research Center for Information Technology
  #   Type: Rosbridge adapter
  # buffer for char quote as we can not put this explicitly in UR Script
  quote = " "
  
  ### bool json_checkKeywordMatch(src="", target="", index=1)
  ### check if a given name in src is a valid identifier
  ### This is checked by testing for a prepositioned and a postpositioned quote + colcon
  ### src: string in which to check if a target is a valid identifier
  ### target: identifier key
  ### index: position of first character of target in src, min value = 1
  def json_checkKeywordMatch(src="", target="", index=1):
    # check strings not empty
    if (str_empty(target)):
      textmsg("target empty!")
      return False
    end
    if (str_empty(src)):
      textmsg("src empty!")
      return False
    end
    
    # determin string lengths
    src_length = str_len(src)
    tgt_length = str_len(target)
    
    # check index in valid range
    if (index <= 0):
      textmsg("index to low!", index)
      return False
    end
    if (index + tgt_length + 1 > src_length):
      textmsg("index to high!", index)
      return False
    end
    if (index >= 2 and str_at(src, index-2) == "\"):
      textmsg("keyword is not valid due to escape sequence")
      return False
    end
    if (index > 0 and str_at(src,index-1) != quote):
      textmsg("keyword not headed by a quote!")
      return False
    end
    if (str_at(src, index + tgt_length) != quote):
      textmsg("keyword not followed by a quote!")
      return False
    end
    if (str_at(src, index + tgt_length + 1) != ":"):
      textmsg("keyword not followed by a colcon!")
      return False
    end
  
    return True
  end
  
  ### int json_strFindFirstNotOf(src, target, start = 0)
  ### find first character in src that is not in target
  ### src: string in which to look for characters
  ### target: string with allowed characters
  ### start: first character to check in src
  ### return position of first character not in target. if none is found return -1
  def json_strFindFirstNotOf(src, target, start = 0):
    position = start
    while (position < str_len(src)):
      a = str_at(src, position)
      if (str_find(target, a) == -1):
        return position
      end
      position = position + 1
    end
    return -1
  end
  
  ### int json_findCorrespondingClosingContainer(src, open_sign, closing_sign, start=1)
  ### with a defined character to open a container and one to close it look for the end of the container
  ### src: string where to look for delimiters
  ### open_sign: character to open a container
  ### closing_sign: character to close a container
  ### start: first character to check in src
  ### return position of closing character in src. -1 if none is found
  def json_findCorrespondingClosingContainer(src="", open_sign=" ", closing_sign=" ", start=1):
    # textmsg("look for Closing Container. start: ", start)
    # textmsg("opening: ", open_sign)
    # textmsg("closing: ", closing_sign)
    if (open_sign == quote):
      position = start +1
    else:
      position = start
    end
    brace_count = 0
    
    while position < str_len(src):
      if (str_at(src, position) == open_sign):
        if(position == 0):
          # textmsg("found an opening at ", position)
          brace_count = brace_count + 1
        elif (str_at(src, position -1) != "\"):
          # textmsg("found an opening at ", position)
          brace_count = brace_count + 1
        end
      end
      
      if (str_at(src, position) == closing_sign):
        if (position == 0):
          textmsg("start is closing delimiter!")
          return 0
        elif (str_at(src, position -1) != "\"):
          # textmsg("found a closing at ", position)
          brace_count = brace_count - 1
        end
        if (brace_count == 0):
          # textmsg("found closing for the container at ", position)
          return position
        end
      end
      
      position = position + 1
    end
    
    textmsg("no closing container found for opening at ", start)
    return -1
  end
  
  ### int json_findCorrespondingDelimiter(src, start = 0)
  ### Look for a following corresponding Delimiter in a Json string.
  ### src: json string to evaluate
  ### start: position of delimiter to look for a corresponding element
  ### return: position of character closing the container
  def json_findCorrespondingDelimiter(src, start = 0):
    # textmsg("find corresponding delimiter. start ", start)
    if (str_empty(src) == True):
      textmsg("Cannot find a corresponding delimiter in empty string")
      return -1
    end
    
    local length = str_len(src)
    local delimiter_start = str_at(src, start)
    local delimiter_end = " "
    
    if (delimiter_start == quote):
      delimiter_end = quote
    elif (delimiter_start == "{"):
      delimiter_end = "}"
    elif (delimiter_start == "["):
      delimiter_end = "]"
    elif (delimiter_start == "("):
      delimiter_end = ")"
    else:
      # boolean expressions and numbers without quotes
      position = json_strFindFirstNotOf(src, "truefalsn0123456789.", start +1)
      return position -1
    end
    
    return json_findCorrespondingClosingContainer(src, delimiter_start, delimiter_end, start)
  end
  
  ### int[4] json_getElement(inp_string, name)
  ### return positions of an Element in a json string
  ### inp_string: json to extract the element from
  ### name: identifier of the element
  ### return: [pos of quote before identifier, pos of quote after identifier, begin of value, end of value]
  def json_getElement(inp_string="", name=""):
    # check inputs not empty
    if (str_empty(inp_string) == True):
      textmsg("Can not evaluate empty json string. abort")
      return [0, 0, 0, 0]
    end
    if (str_empty(name) == True):
      textmsg("Empty json identifier to look for. abort")
      return [0, 0, 0, 0]
    end
  
    # determine actual length of inputs
    local inp_length = str_len(inp_string)
    local name_length = str_len(name)
  
    local element_begin = 0
    local value_begin = 0
    local element_end = 0
    local index = 0
  
    # search for name and check it is a keyword
    while (index < inp_length):
      index = str_find(inp_string, name, element_begin)
      if (json_checkKeywordMatch(inp_string, name, index) == True):
        element_begin = index
        break
      end
  
      # return 0 if no valid identifier was found
      if (index == -1):
        return [0, 0, 0, 0]
      end
  
      index = index + 1
    end
    
    # set element_begin to quote before identifier, always valid as otherwise checkKeywordMatch fails
    element_begin = element_begin - 1
    
    # set temporary element_end to end of identifier
    element_end = element_begin + name_length + 2
    
    # search for begin of elements value
    value_begin = json_strFindFirstNotOf(inp_string, ": ", element_end)
    
    # return 0 if no value found
    if (value_begin == -1):
      textmsg("did not find begin of value")
      return [0, 0, 0, 0]
    end
    
    # search end of value
    element_end = json_findCorrespondingDelimiter(inp_string, value_begin)
    
    # return 0 if no valid end of value/element found
    if (element_end == -1):
      textmsg("did not find end of element")
      return [0, 0, 0, 0]
    end
    
    return [element_begin, element_begin + name_length + 1, value_begin, element_end]
  end
  
  ### string json_reduceString(inp_string="", start=0, length=0)
  ### get the string without a substring defined by start and length
  ### inp_string: string that shall be reduced
  ### start: index of first character of substring to be removed
  ### length: length of substring to be removed
  ### return: catenated string of residual strings before and behind substring
  def json_reduceString(inp_string="", start=0, length=0):
    local prefix = str_sub(inp_string, 0, start)
    local postfix = str_sub(inp_string, start + length)
    return str_cat(prefix, postfix)
  end

  ### string json_removeSurroundingQuotes(inp_string)
  ### Remove surrounding " signs if present
  ### return: input string if not the first and last characters are the quote character
  def json_removeSurroundingQuotes(inp_string=""):
    local len = str_len(inp_string)
    if len < 1:
      textmsg("json_removeSurroundingQuotes: Passed string is empty!")
      return inp_string
    end
    if str_at(inp_string, 0) == quote:
      if (str_at(inp_string, len - 1)) == quote:
        return str_sub(inp_string, 1, len - 2)
      end
    end
    return inp_string
  end

  # get quote for json parsing
  def rosbridge_get_quote(remoteIP, remotePort):
  quote_socket_connected = socket_open(remoteIP, remotePort, "quotesocket")
  if (quote_socket_connected == False):
    popup("Could not connect to rosbridge at " + remoteIP + ":" + to_str(remotePort) + ". Following ROS calls will not work! Check your connection setup and make sure the rosbridge is actually running.", "Connection failed", error=True, blocking=True)
  end
  socket_send_byte(123, "quotesocket")	# {
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(111, "quotesocket")	# o
  socket_send_byte(112, "quotesocket")	# p
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(58, "quotesocket")	# :
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(99, "quotesocket")	# c
  socket_send_byte(97, "quotesocket")	# a
  socket_send_byte(108, "quotesocket")	# l
  socket_send_byte(108, "quotesocket")	# l
  socket_send_byte(95, "quotesocket")	# _
  socket_send_byte(115, "quotesocket")	# s
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(114, "quotesocket")	# r
  socket_send_byte(118, "quotesocket")	# v
  socket_send_byte(105, "quotesocket")	# i
  socket_send_byte(99, "quotesocket")	# c
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(44, "quotesocket")	# ,
  socket_send_byte(32, "quotesocket")	#
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(115, "quotesocket")	# s
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(114, "quotesocket")	# r
  socket_send_byte(118, "quotesocket")	# v
  socket_send_byte(105, "quotesocket")	# i
  socket_send_byte(99, "quotesocket")	# c
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(58, "quotesocket")	# :
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(47, "quotesocket")	# /
  socket_send_byte(114, "quotesocket")	# r
  socket_send_byte(111, "quotesocket")	# o
  socket_send_byte(115, "quotesocket")	# s
  socket_send_byte(97, "quotesocket")	# a
  socket_send_byte(112, "quotesocket")	# p
  socket_send_byte(105, "quotesocket")	# i
  socket_send_byte(47, "quotesocket")	# /
  socket_send_byte(103, "quotesocket")	# g
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(116, "quotesocket")	# t
  socket_send_byte(95, "quotesocket")	# _
  socket_send_byte(116, "quotesocket")	# t
  socket_send_byte(105, "quotesocket")	# i
  socket_send_byte(109, "quotesocket")	# m
  socket_send_byte(101, "quotesocket")	# e
  socket_send_byte(34, "quotesocket")	# "
  socket_send_byte(125, "quotesocket")	# }
  response = socket_read_string("quotesocket")
  if (str_len(response) > 2):
    textmsg(response)
    quote = str_at(response, 1)
    bounds = json_getElement(inp_string=response, name="result")
    quote_result = str_sub(response, bounds[2], bounds[3]-bounds[2]+1)
    if (quote_result != "true"):
      popup("Parsing quote from rosbridge answer failed! Make sure that the rosbridge is actually running at " + remoteIP + ":" + to_str(remotePort) + ".", "Parsing quote char failed", error=True, blocking=True)
    end
  else:
    popup("Could not receive quote char from rosbridge. Make sure that the rosbridge is actually running at " + remoteIP + ":" + to_str(remotePort) + ".", "Did not receive quote char", error=True, blocking=True)
  end
  socket_close("quotesocket")
  end
  # Action status to string
  def goalStateString(state_num):
  if (state_num == 0):
    return "PENDING"
  elif (state_num == 1):
    return "ACTIVE"
  elif (state_num == 2):
    return "PREEMPTED"
  elif (state_num == 3):
    return "SUCCEEDED"
  elif (state_num == 4):
    return "ABORTED"
  elif (state_num == 5):
    return "REJECTED"
  elif (state_num == 6):
    return "PREEMPTING"
  elif (state_num == 7):
    return "RECALLING"
  elif (state_num == 8):
    return "RECALLED"
  elif (state_num == 9):
    return "LOST"
  end
  end
  # end: URCap Installation Node
  global home_p=p[-.242780364362, -.857837814044, .589961442664, -.559934109320, -1.872691088672, 1.941078302238]
  global home_q=[1.2241512140176587, -1.0997877665973235, 0.7400687037522087, 0.3299826332365168, 1.7878775305482186, 0.017436470614602215]
  global huevo1_p=p[-.242727252654, -.857898573526, .589927128421, -.559900855688, -1.872726636404, 1.941154223220]
  global huevo1_q=[1.2242337465286255, -1.0996917349151154, 0.7400267759906214, 0.3299160438724975, 1.7878870964050293, 0.017463665455579758]
  global inter_p=p[-.708330102040, -.031818793416, .217607111917, -1.945471659680, -1.736359133925, .275984412179]
  global inter_q=[-0.042415920888082326, -0.9688180846026917, 0.8741424719439905, 1.1477176386066894, 1.787548303604126, 0.017675602808594704]
  global canasta_p=p[-.519086211389, -.129593444852, -.586570032220, -2.223930629628, -2.192591203278, .000433573887]
  global canasta_q=[-0.004203621541158498, 0.17512433111157222, 0.8734391371356409, 0.5093151766010742, 1.5863847732543945, 0.01735905185341835]
  while (True):
    $ 2 "Robot Program"
    $ 3 "MoveJ"
    $ 4 "home" "breakAfter"
    movej(get_inverse_kin(home_p, qnear=home_q), a=1.3962634015954636, v=1.0471975511965976)
    $ 5 "init≔0"
    global init=0
    $ 6 "var_3≔0"
    global var_3=0
    # begin: URCap Program Node
    #   Source: ros_as_a_service, 0.2.0, FZI Research Center for Information Technology
    #   Type: Subscribe Topic
    $ 7 "Sub. /my_topic/int"
    rosbridge_get_quote("192.168.0.229", 9090)
    # init subscriber
    subscriptMsg_my_topic_int = ""
    def parseSubscript_my_topic_int_8():
      local l_msg = subscriptMsg_my_topic_int
      local bounds = [0, 0, 0, 0]
      if (json_findCorrespondingDelimiter(l_msg) == -1):
        popup("Received String exceeds maximum length (1023 Bytes).", "JSON Error", error=True, blocking=True)
      end
      bounds = json_getElement(l_msg, "data")
      init = to_num(str_sub(l_msg, bounds[2], bounds[3]-bounds[2]+1))
      l_msg = json_reduceString(l_msg, bounds[0], bounds[3]-bounds[0]+1)
    end
    socket_open("192.168.0.229", 9090, "subscriber_my_topic_int")
    socket_send_line("{" + quote + "op" + quote + ": " + quote + "subscribe" + quote + ", " + quote + "topic" + quote + ": " + quote + "/my_topic/int" + quote + "}", "subscriber_my_topic_int")
    local msg = " "
    local tmp = " "
    while (subscriptMsg_my_topic_int == ""):
      tmp = socket_read_string("subscriber_my_topic_int")
      if not(str_empty(tmp)):
        local bounds = json_getElement(tmp, "msg")
        msg = str_sub(tmp, bounds[2], bounds[3]-bounds[2]+1)
        subscriptMsg_my_topic_int = msg
      end
      sync()
    end
    parseSubscript_my_topic_int_8()
    socket_send_line("{" + quote + "op" + quote + ": " + quote + "unsubscribe" + quote + ", " + quote + "topic" + quote + ": " + quote + "/my_topic/int" + quote + "}", "subscriber_my_topic_int")
    socket_close("subscriber_my_topic_int")
    # end: URCap Program Node
    $ 8 "Switch init"
    switch_1 = init
    $ 9 "Case 1"
    if (1 == switch_1):
      $ 10 "MoveJ"
      $ 11 "huevo1" "breakAfter"
      movej(get_inverse_kin(huevo1_p, qnear=huevo1_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 12 "huevo11≔huevo1"
      global huevo11=huevo1_p
    elif (2 == switch_1):
      $ 13 "Case 2"
      $ 14 "MoveJ"
      $ 15 "inter" "breakAfter"
      movej(get_inverse_kin(inter_p, qnear=inter_q), a=1.3962634015954636, v=1.0471975511965976)
      $ 16 "canasta" "breakAfter"
      movej(get_inverse_kin(canasta_p, qnear=canasta_q), a=1.3962634015954636, v=1.0471975511965976)
    end
    $ 17 "Wait: 1.0"
    sleep(1.0)
    # begin: URCap Program Node
    #   Source: ros_as_a_service, 0.2.0, FZI Research Center for Information Technology
    #   Type: Publish Topic
    $ 18 "Pub. /my_topic/string"
    socket_open("192.168.0.229", 9090, "publisher__my_topic_string")
    socket_send_line("{" + quote + "op" + quote + ": " + quote + "advertise" + quote + ", " + quote + "topic" + quote + ": " + quote + "/my_topic/string" + quote + ", " + quote + "type" + quote + ": " + quote + "std_msgs/String" + quote + "}", "publisher__my_topic_string")
    socket_send_line("{" + quote + "op" + quote + ": " + quote + "publish" + quote + ", " + quote + "topic" + quote + ": " + quote + "/my_topic/string" + quote + ", " + quote + "msg" + quote + ": {" + quote + "data" + quote + ":" + quote + to_str(huevo11) + quote + "}}", "publisher__my_topic_string")
    textmsg("sending: {" + quote + "op" + quote + ": " + quote + "publish" + quote + ", " + quote + "topic" + quote + ": " + quote + "/my_topic/string" + quote + ", " + quote + "msg" + quote + ": {" + quote + "data" + quote + ":" + quote + to_str(huevo11) + quote + "}}")
    socket_close("publisher__my_topic_string")
    # end: URCap Program Node
  end
end
